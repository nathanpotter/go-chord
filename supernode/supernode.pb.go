// Code generated by protoc-gen-go.
// source: supernode.proto
// DO NOT EDIT!

/*
Package supernode is a generated protocol buffer package.

It is generated from these files:
	supernode.proto

It has these top-level messages:
	Empty
	NodeInfo
	JoinRequest
	JoinResponse
	PostJoinRequest
	NodeResponse
*/
package supernode

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type NodeInfo struct {
	Ip   string `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
	Port string `protobuf:"bytes,2,opt,name=port" json:"port,omitempty"`
}

func (m *NodeInfo) Reset()                    { *m = NodeInfo{} }
func (m *NodeInfo) String() string            { return proto.CompactTextString(m) }
func (*NodeInfo) ProtoMessage()               {}
func (*NodeInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type JoinRequest struct {
	Node *NodeInfo `protobuf:"bytes,1,opt,name=node" json:"node,omitempty"`
}

func (m *JoinRequest) Reset()                    { *m = JoinRequest{} }
func (m *JoinRequest) String() string            { return proto.CompactTextString(m) }
func (*JoinRequest) ProtoMessage()               {}
func (*JoinRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *JoinRequest) GetNode() *NodeInfo {
	if m != nil {
		return m.Node
	}
	return nil
}

type JoinResponse struct {
	Nodes []*NodeInfo `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty"`
	Busy  bool        `protobuf:"varint,2,opt,name=busy" json:"busy,omitempty"`
}

func (m *JoinResponse) Reset()                    { *m = JoinResponse{} }
func (m *JoinResponse) String() string            { return proto.CompactTextString(m) }
func (*JoinResponse) ProtoMessage()               {}
func (*JoinResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *JoinResponse) GetNodes() []*NodeInfo {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type PostJoinRequest struct {
	Node *NodeInfo `protobuf:"bytes,1,opt,name=node" json:"node,omitempty"`
}

func (m *PostJoinRequest) Reset()                    { *m = PostJoinRequest{} }
func (m *PostJoinRequest) String() string            { return proto.CompactTextString(m) }
func (*PostJoinRequest) ProtoMessage()               {}
func (*PostJoinRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PostJoinRequest) GetNode() *NodeInfo {
	if m != nil {
		return m.Node
	}
	return nil
}

type NodeResponse struct {
	Node *NodeInfo `protobuf:"bytes,1,opt,name=node" json:"node,omitempty"`
}

func (m *NodeResponse) Reset()                    { *m = NodeResponse{} }
func (m *NodeResponse) String() string            { return proto.CompactTextString(m) }
func (*NodeResponse) ProtoMessage()               {}
func (*NodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *NodeResponse) GetNode() *NodeInfo {
	if m != nil {
		return m.Node
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "supernode.Empty")
	proto.RegisterType((*NodeInfo)(nil), "supernode.NodeInfo")
	proto.RegisterType((*JoinRequest)(nil), "supernode.JoinRequest")
	proto.RegisterType((*JoinResponse)(nil), "supernode.JoinResponse")
	proto.RegisterType((*PostJoinRequest)(nil), "supernode.PostJoinRequest")
	proto.RegisterType((*NodeResponse)(nil), "supernode.NodeResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Supernode service

type SupernodeClient interface {
	// When a node wantes to join the DHT, it contacts the Supernode
	// If the Supernode is busy in join process of another node,
	// it tells requesting node.
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	// After the node is done joining the DHT and distributing the list
	// of nodes to the other nodes, it should notify the Supernode.
	PostJoin(ctx context.Context, in *PostJoinRequest, opts ...grpc.CallOption) (*Empty, error)
	// When a client wants to utilize the chord system, it needs a DHT node.
	// The Supernode returns a random node for the client to connect to.
	GetNode(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NodeResponse, error)
}

type supernodeClient struct {
	cc *grpc.ClientConn
}

func NewSupernodeClient(cc *grpc.ClientConn) SupernodeClient {
	return &supernodeClient{cc}
}

func (c *supernodeClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	out := new(JoinResponse)
	err := grpc.Invoke(ctx, "/supernode.Supernode/Join", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supernodeClient) PostJoin(ctx context.Context, in *PostJoinRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/supernode.Supernode/PostJoin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supernodeClient) GetNode(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NodeResponse, error) {
	out := new(NodeResponse)
	err := grpc.Invoke(ctx, "/supernode.Supernode/GetNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Supernode service

type SupernodeServer interface {
	// When a node wantes to join the DHT, it contacts the Supernode
	// If the Supernode is busy in join process of another node,
	// it tells requesting node.
	Join(context.Context, *JoinRequest) (*JoinResponse, error)
	// After the node is done joining the DHT and distributing the list
	// of nodes to the other nodes, it should notify the Supernode.
	PostJoin(context.Context, *PostJoinRequest) (*Empty, error)
	// When a client wants to utilize the chord system, it needs a DHT node.
	// The Supernode returns a random node for the client to connect to.
	GetNode(context.Context, *Empty) (*NodeResponse, error)
}

func RegisterSupernodeServer(s *grpc.Server, srv SupernodeServer) {
	s.RegisterService(&_Supernode_serviceDesc, srv)
}

func _Supernode_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupernodeServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supernode.Supernode/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupernodeServer).Join(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supernode_PostJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostJoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupernodeServer).PostJoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supernode.Supernode/PostJoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupernodeServer).PostJoin(ctx, req.(*PostJoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supernode_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupernodeServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supernode.Supernode/GetNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupernodeServer).GetNode(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Supernode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "supernode.Supernode",
	HandlerType: (*SupernodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _Supernode_Join_Handler,
		},
		{
			MethodName: "PostJoin",
			Handler:    _Supernode_PostJoin_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _Supernode_GetNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("supernode.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 258 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x92, 0xc1, 0x4a, 0xc4, 0x30,
	0x10, 0x86, 0xdb, 0xb5, 0xeb, 0xb6, 0xb3, 0x8b, 0x2b, 0x23, 0xe8, 0xd2, 0x93, 0xe4, 0xa2, 0x5e,
	0x7a, 0x58, 0x61, 0xc5, 0xde, 0x45, 0x14, 0x14, 0x89, 0x6f, 0x50, 0x8c, 0xd0, 0x83, 0x99, 0xd8,
	0xa4, 0x87, 0xbe, 0x9a, 0x4f, 0x67, 0x93, 0xd0, 0x1a, 0x2d, 0x82, 0x78, 0x1b, 0xfe, 0x99, 0x7f,
	0xfe, 0x6f, 0x48, 0x60, 0xad, 0x5b, 0x25, 0x1a, 0x49, 0x2f, 0xa2, 0x50, 0x0d, 0x19, 0xc2, 0x6c,
	0x14, 0xd8, 0x02, 0xe6, 0x37, 0x6f, 0xca, 0x74, 0xac, 0x80, 0xf4, 0xb1, 0x17, 0xee, 0xe4, 0x2b,
	0xe1, 0x01, 0xcc, 0x6a, 0xb5, 0x89, 0x4f, 0xe3, 0xf3, 0x8c, 0xf7, 0x15, 0x22, 0x24, 0x8a, 0x1a,
	0xb3, 0x99, 0x39, 0xc5, 0xd5, 0x6c, 0x07, 0xcb, 0x7b, 0xaa, 0x25, 0x17, 0xef, 0xad, 0xd0, 0x06,
	0xcf, 0x20, 0xb1, 0xfb, 0x9c, 0x69, 0xb9, 0x3d, 0x2a, 0xbe, 0x22, 0x87, 0xad, 0xdc, 0x0d, 0xb0,
	0x07, 0x58, 0x79, 0x9f, 0x56, 0x24, 0xb5, 0xc0, 0x0b, 0x98, 0x5b, 0x5d, 0xf7, 0xce, 0xbd, 0xdf,
	0x9c, 0x7e, 0xc2, 0x62, 0x54, 0xad, 0xee, 0x1c, 0x46, 0xca, 0x5d, 0xcd, 0x4a, 0x58, 0x3f, 0x91,
	0x36, 0xff, 0x42, 0xb9, 0x82, 0x95, 0x55, 0x46, 0x94, 0xbf, 0x1a, 0xb7, 0x1f, 0x31, 0x64, 0xcf,
	0x43, 0x13, 0xaf, 0x21, 0xb1, 0xf1, 0x78, 0x1c, 0x18, 0x02, 0x9e, 0xfc, 0x64, 0xa2, 0xfb, 0x3c,
	0x16, 0x61, 0x09, 0xe9, 0x40, 0x8f, 0x79, 0x30, 0xf6, 0xe3, 0xa4, 0xfc, 0x30, 0xe8, 0xf9, 0xe7,
	0x8a, 0x70, 0x07, 0x8b, 0x5b, 0x61, 0x2c, 0x19, 0x4e, 0xda, 0xdf, 0x32, 0xc3, 0x1b, 0x59, 0x54,
	0xed, 0xbb, 0x3f, 0x70, 0xf9, 0x19, 0x00, 0x00, 0xff, 0xff, 0x14, 0x27, 0xd0, 0x1b, 0x16, 0x02,
	0x00, 0x00,
}
